import "node_modules/scrypt-ord/src/contracts/ordinal.scrypt";
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract Article {
  @state bool isOneSatNFT;
  bytes articalAuthor;
  int shareReward;
  int likeFee;
  bytes publishdate;
  bytes category;
  bytes heading;
  bytes subheading;
  bytes content;
  @state int likecount;
  @state int sharecount;
  @state PubKey authorPubKey;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(int shareReward, int likeReward, bytes articalAuthor, bytes content, bytes subheading, bytes heading, bytes publishdate, bytes category, PubKey authorPubKey, int likecount, int sharecount) {
    this.isOneSatNFT = true;
    
    this.shareReward = shareReward;
    this.likeFee = likeReward;
    this.publishdate = publishdate;
    this.heading = heading;
    this.subheading = subheading;
    this.category = category;
    this.articalAuthor = articalAuthor;
    this.authorPubKey = authorPubKey;
    this.content = content;
    this.likecount = likecount;
    this.sharecount = sharecount;
  }
  function buildStateOutputNFT() : bytes {
    bytes stateScript = Ordinal.removeInsciption(this.getStateScript());
    return Utils.buildOutput(stateScript, 1);
  }
  static function buildInscribedOutput(bytes script, bytes content, bytes contentType) : bytes {
    bytes part1 = Ordinal.createInsciption(content, contentType);
    bytes part2 = Ordinal.removeInsciption(script);
    return Utils.buildOutput(part1 + part2, 1);
  }
  public function like(Sig likerSig, PubKey publicKeyLiker, int rewardamount, PubKey authorPubKey, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    
    
    require(rewardamount >= this.likeFee);
    require(authorPubKey == this.authorPubKey);
    require(checkSig(likerSig, publicKeyLiker));
    this.likecount = this.likecount + (1);
    
    bytes outputs = this.buildStateOutputNFT();
    outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.authorPubKey)), rewardamount);
    outputs += this.buildChangeOutput();
    
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  public function share(PubKey sharerpubKey, Sig sharerSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(checkSig(sharerSig, sharerpubKey));
    this.sharecount++;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}