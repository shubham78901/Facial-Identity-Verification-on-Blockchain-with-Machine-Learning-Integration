import "node_modules/scrypt-ord/src/contracts/ordinal.scrypt";
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract MachineLearningNft {
  @state bool isOneSatNFT;
  bytes nftHolderName;
  bytes vectorOfCosine;
  @state bytes faceMatchResult;
  bytes __scrypt_ts_ctx_hashoutputs;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(bytes nftHolderName, bytes vectorOfCosine, bytes faceMatchResult) {
    this.isOneSatNFT = true;
    
    this.nftHolderName = nftHolderName;
    this.vectorOfCosine = vectorOfCosine;
    this.faceMatchResult = faceMatchResult;
  }
  function buildStateOutputNFT() : bytes {
    bytes stateScript = Ordinal.removeInsciption(this.getStateScript());
    return Utils.buildOutput(stateScript, 1);
  }
  static function buildInscribedOutput(bytes script, bytes content, bytes contentType) : bytes {
    bytes part1 = Ordinal.createInsciption(content, contentType);
    bytes part2 = Ordinal.removeInsciption(script);
    return Utils.buildOutput(part1 + part2, 1);
  }
  public function registerResultAfterFaceMatch(Sig ownerSig, PubKey ownerPubKey, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(checkSig(ownerSig, ownerPubKey));
    bytes outputs = this.buildStateOutputNFT();
    outputs += this.buildChangeOutput();
    
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}